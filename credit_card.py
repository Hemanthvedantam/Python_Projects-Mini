# -*- coding: utf-8 -*-
"""Credit_Card.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1v0Qv8Ra7hij1gg2wYGsB2aMQxq4q9np6
"""

import numpy as np
import pandas as pd
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error,accuracy_score
import seaborn as sns
import matplotlib.pyplot as plt


df=pd.read_csv('Credit_Card.csv')
print(df.head())
print('\n')
print(df.info())
print('\n')
print(df.tail())
print('\n')

print(df.isnull())

print(df.isnull().sum())
print('\n')


df['Class'].value_counts()
print('\n')

legal=df[df.Class==0]
fraud=df[df.Class==1]

print(legal.shape)
print(fraud.shape)
print('\n')

legal.Amount.describe()
fraud.Amount.describe()

df.groupby('Class').mean()
print('\n')

legal_sample=legal.sample(n=492)

new_df=pd.concat([legal_sample,fraud],axis=0)
print(new_df.head())
print('\n')
print(new_df.tail())

new_df['Class'].value_counts()
print('\n')
new_df.groupby('Class').mean()
print('\n')


X=new_df.drop(columns='Class',axis=1)
y=new_df['Class']
print(X)
print('\n')
print(y)
print('\n')

X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2,random_state=2)

print(X.shape,X_train.shape,X_test.shape)
print('\n')

model=LogisticRegression()
model.fit(X_train,y_train)

prediction=model.predict(X_train)
training_accuracy=accuracy_score(prediction,y_train)
print(training_accuracy)
print('\n')
mse=mean_squared_error(prediction,y_train)
print(mse)
print('\n')

prediction=model.predict(X_test)
testing_accuracy=accuracy_score(prediction,y_test)
mse1=mean_squared_error(prediction,y_test)
print(testing_accuracy)
print('\n')
print(mse1)
print('\n')

plt.figure(figsize=(10, 5))
sns.histplot(legal['Amount'], bins=50, color='blue', kde=True, label='Legal', stat='density')
sns.histplot(fraud['Amount'], bins=50, color='red', kde=True, label='Fraud', stat='density')
plt.legend()
plt.title('Distribution of Transaction Amounts')
plt.xlabel('Transaction Amount')
plt.ylabel('Density')
plt.show()

plt.figure(figsize=(15, 10))
correlation_matrix = new_df.corr()
sns.heatmap(correlation_matrix, annot=True, fmt='.2f', cmap='coolwarm')
plt.title('Correlation Matrix')
plt.show()

sns.countplot(data=new_df, x='Class')
plt.title('Class Distribution')
plt.show()

plt.figure(figsize=(10, 5))
sns.boxplot(x='Class', y='Amount', data=new_df)
plt.title('Boxplot of Amount by Class')
plt.show()